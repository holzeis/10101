name: "Create release"

on:
  pull_request:
    types:
      - closed

env:
  FLUTTER_VERSION: "3.7.7"
  RUST_VERSION: "1.68.0"

jobs:
  build:
    runs-on: macos-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    outputs:
      ANDROID_APK_NAME: ${{ steps.build.outputs.ANDROID_APK_NAME }}
    steps:
      - uses: actions/checkout@v2

      - name: Create auth key
        env:
          ALTOOL_API_KEY: ${{ secrets.ALTOOL_API_KEY }}
          AUTH_KEY: ${{ secrets.AUTH_KEY }}
        run: |
          cd mobile
          echo $AUTH_KEY | base64 -d > private_keys/AuthKey_$ALTOOL_API_KEY.p8
          ls -al private_keys/

      # #499, https://github.com/actions/virtual-environments/issues/5595
      - name: Configure ndk
        run: |
          ANDROID_HOME=$HOME/Library/Android/sdk
          SDKMANAGER=$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager

          echo y | $SDKMANAGER "ndk;21.4.7075529"

          ln -sfn $ANDROID_HOME/ndk/21.4.7075529 $ANDROID_HOME/ndk-bundle

      - name: Setup | Rust
        uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: ${{ env.RUST_VERSION }}
          components: rustfmt

      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11.x"
          cache: "gradle"

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          architecture: x64

      - uses: actions/cache@v3
        id: cache-deps
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./rust/target
          key: ${{ runner.os }}-cargo-integrate-android-${{ hashFiles('**/Cargo.lock') }}-${{ steps.checkout.outputs.rustc_hash }}

      - name: Install just
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: cargo install just

      - name: Install FFI bindings
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: just deps-gen

      - name: Generate FFI bindings
        run: just gen

      - name: Add Rust targets
        run: rustup target add armv7-linux-androideabi aarch64-linux-android aarch64-apple-ios x86_64-apple-ios

      # Build ios release
      - name: Install `cargo-lipo`
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: cargo install cargo-lipo --force

      - name: Build iOS Rust lib
        run: just ios

      # Install the Apple certificate and provisioning profile
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo $BUILD_CERTIFICATE_BASE64 | base64 -d > $CERTIFICATE_PATH
          echo $BUILD_PROVISION_PROFILE_BASE64 | base64 -d > $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS Archive
        id: build-ios
        run: |
          cd mobile
          flutter build ipa --export-options-plist=ios/exportOptions.plist --release --dart-define="ELECTRS_ENDPOINT=${{ env.ELECTRS_ENDPOINT }}" --dart-define="COORDINATOR_P2P_ENDPOINT=${{ env.COORDINATOR_P2P_ENDPOINT }}" --dart-define="COMMIT=$(git rev-parse HEAD)" --dart-define="BRANCH=$(git rev-parse --abbrev-ref HEAD)"

      - name: Release to TestFlight
        env:
          ALTOOL_API_KEY: ${{ secrets.ALTOOL_API_KEY }}
          ALTOOL_API_ISSUER: ${{ secrets.ALTOOL_API_ISSUER }}
          AUTH_KEY: ${{ secrets.AUTH_KEY }}
        run: |
          cd mobile
          echo $AUTH_KEY | base64 -d > private_keys/AuthKey_$ALTOOL_API_KEY.p8
          xcrun altool --upload-app --type ios --file ./build/ios/ipa/10101.ipa --apiKey ${{ env.ALTOOL_API_KEY }} --apiIssuer ${{ env.ALTOOL_API_ISSUER }}

      # Important! Cleanup: remove the certificate and provisioning profile from the runner!
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      # Build android release
      - name: Install `cargo-ndk`
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: cargo install cargo-ndk --force

      - name: Build Android Rust lib
        working-directory: ./mobile/native
        run: cargo ndk -o ../android/app/src/main/jniLibs build

      - name: Parse version from pubspec.yaml
        id: version
        uses: jbutcher5/read-yaml@1.6
        with:
          file: "mobile/pubspec.yaml"
          key-path: '["version"]'

      - name: Build Android APK release
        id: build-android
        run: |
          mkdir keystore
          echo $ENCODED_KEYSTORE | base64 -d > keystore/upload-keystore.jks
          BUILD_NAME=${{ steps.version.outputs.data }}
          BUILD_NUMBER=$(git rev-list HEAD --count)
          cd mobile
          flutter build apk --dart-define="ELECTRS_ENDPOINT=${{ env.ELECTRS_ENDPOINT }}" --dart-define="COORDINATOR_P2P_ENDPOINT=${{ env.COORDINATOR_P2P_ENDPOINT }}" --dart-define="COMMIT=$(git rev-parse HEAD)" --dart-define="BRANCH=$(git rev-parse --abbrev-ref HEAD)" --build-name=$BUILD_NAME --build-number=$BUILD_NUMBER --release
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/get10101-$BUILD_NAME.apk
          echo "ANDROID_APK_NAME=$(echo get10101-$BUILD_NAME.apk)" >> $GITHUB_OUTPUT
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_UPLOAD_SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_UPLOAD_SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_UPLOAD_SIGNING_STORE_PASSWORD }}
          ENCODED_KEYSTORE: ${{ secrets.ANDROID_UPLOAD_KEYSTORE }}

      - name: Upload APK to job
        uses: actions/upload-artifact@v3
        with:
          name: ${{steps.build-android.outputs.ANDROID_APK_NAME}}
          path: mobile/build/app/outputs/flutter-apk/${{steps.build.outputs.ANDROID_APK_NAME}}

  release:
    needs: build
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract version from branch name
        id: extract-version
        shell: python
        run: |
          branch_name = "${{ github.event.pull_request.head.ref }}"
          version = branch_name.split("/")[1]

          print(f"::set-output name=version::{version}")

      - name: Extract changelog section for release
        id: changelog
        uses: coditory/changelog-parser@v1
        with:
          version: ${{ steps.extract-version.outputs.version }}

      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.ANDROID_APK_NAME }}

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ needs.build.outputs.ANDROID_APK_NAME }}
          body: ${{ steps.changelog.outputs.description }}
          token: ${{ secrets.GH_ACTION_TOKEN }}
          tag: ${{ steps.extract-version.outputs.version }}
